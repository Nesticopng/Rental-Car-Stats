import streamlit as st
import plotly.express as px
import numpy as np
from src.utils.helpers import cargar_datos
from src.utils.paleta_rojo import rojo

# Mapeo de nombres de variables
variable_mapping = {
    "Cantidad de Rentas": "Cantidad",
    "Dinero Recaudado por Tarifa B√°sica": "TotalRate",
    "Dinero Recaudado por Extras Gastados": "TotalExtras",
    "Dinero Recaudado por Tarifa Total": "TotalBill",
    "Promedio de D√≠as Rentados": "RDays"
}

# An√°lisis Automatizado
def mostrar_datos_y_analisis(data, es_dinero, es_promedio, metrica):
    st.write("### An√°lisis Estad√≠stico")
    analisis = []

    # Calcular estad√≠sticas clave
    total_registros = len(data)
    media = data.iloc[:, 1].mean()
    mediana = data.iloc[:, 1].median()
    desviacion = data.iloc[:, 1].std()
    max_valor = data.iloc[:, 1].max()
    min_valor = data.iloc[:, 1].min()
    top_empresa = data.iloc[0, 0]
    top_valor = data.iloc[0, 1]

    # Calcular percentiles
    percentil_90 = np.percentile(data.iloc[:, 1], 90)
    percentil_10 = np.percentile(data.iloc[:, 1], 10)

    # An√°lisis General
    analisis.append(f"üìä **Total de Empresas Analizadas:** {total_registros:,}")
    analisis.append(f"üìà **Promedio de {metrica}:** {media:,.2f}")
    analisis.append(f"üìä **Mediana de {metrica}:** {mediana:,.2f}")
    analisis.append(f"üìâ **Desviaci√≥n est√°ndar:** {desviacion:,.2f}")
    analisis.append(f"üîù **Empresa con mayor {metrica}:** {top_empresa} con {top_valor:,.2f}")
    analisis.append(f"üîΩ **Menor {metrica} en el registro:** {min_valor:,.2f}")
    analisis.append(f"üèÜ **Mayor {metrica} en el registro:** {max_valor:,.2f}")

    # An√°lisis de dispersi√≥n
    if desviacion > media * 0.5:
        analisis.append(f"‚ö†Ô∏è **Alta variabilidad:** Existen grandes diferencias entre empresas en esta m√©trica de {metrica}.")
    else:
        analisis.append("‚úÖ **Distribuci√≥n estable:** No hay grandes diferencias extremas en la m√©trica analizada.")

    # An√°lisis de concentraci√≥n
    if max_valor > percentil_90 * 1.5:
        analisis.append(f"üöÄ **El valor m√°ximo ({max_valor:,.2f}) es significativamente superior al percentil 90.** Esto sugiere que una o pocas empresas dominan la m√©trica.")
    elif max_valor < percentil_90:
        analisis.append("üìä **El valor m√°ximo no es muy superior al percentil 90.** Esto indica una distribuci√≥n m√°s uniforme.")

    if min_valor < percentil_10:
        analisis.append(f"üîª **Existen empresas con valores por debajo del percentil 10.** Es recomendable evaluar si requieren optimizaci√≥n.")

    # Recomendaciones estrat√©gicas
    if media > 1000 and es_dinero:
        analisis.append("üí∞ **Los ingresos promedio son altos.** Se puede considerar estrategias para mantener esta tendencia positiva.")
    elif media < 500 and es_dinero:
        analisis.append("üìâ **Ingresos promedio bajos.** Evaluar promociones o mejoras en estrategias de captaci√≥n.")

    if top_valor > media * 2:
        analisis.append(f"üèÜ **{top_empresa} es l√≠der en {metrica}.** Se podr√≠a analizar su situaci√≥n y estrategias para replicar en otras empresas.")

    # Mostrar el an√°lisis l√≠nea por l√≠nea
    for linea in analisis:
        st.write(linea)

    if es_dinero:
        columnas_a_mostrar = ["Empresa", "Dinero Recaudado ($USD)"]

    elif es_promedio:
        columnas_a_mostrar = ["Empresa", "Promedio de D√≠as Rentados"]

    else:
        columnas_a_mostrar = ["Empresa", "Cantidad de Veh√≠culos Rentados"]

    st.write("### Tabla de Datos")
    st.write(data[columnas_a_mostrar])

# Generar Gr√°fico
def grafica_source():
    
    # Cargar Datos
    df = cargar_datos()
    
    # Contar la frecuencia de cada fuente de reserva
    frecuencia_source = df["Source"].value_counts().reset_index()
    frecuencia_source.columns = ["Empresa", "Cantidad de Veh√≠culos Rentados"]

    st.header("An√°lisis de Rentas y Recaudaci√≥n por Empresa")
    
    metrica = st.selectbox(
        "M√©trica a analizar",
        ("Cantidad de Rentas", "Dinero Recaudado por Tarifa B√°sica", "Dinero Recaudado por Extras Gastados", "Dinero Recaudado por Tarifa Total", "Promedio de D√≠as Rentados")
    )

    if metrica == "Cantidad de Rentas":
        data = frecuencia_source
        es_dinero = False
        es_promedio = False

    elif metrica == "Promedio de D√≠as Rentados":
        columna_real = variable_mapping[metrica]
        data = df.groupby("Source")[columna_real].mean().reset_index()
        data.columns = ["Empresa", "Cantidad de Veh√≠culos Rentados"]
        data["Cantidad de Veh√≠culos Rentados"] = data["Cantidad de Veh√≠culos Rentados"].round(2)
        data["Promedio de D√≠as Rentados"] = data["Cantidad de Veh√≠culos Rentados"].apply(lambda x: f"{x:.2f} d√≠as")
        es_dinero = False
        es_promedio = True

    else:
        columna_real = variable_mapping[metrica]
        data = df.groupby("Source")[columna_real].sum().reset_index()
        data.columns = ["Empresa", "Cantidad de Veh√≠culos Rentados"]
        data["Cantidad de Veh√≠culos Rentados"] = data["Cantidad de Veh√≠culos Rentados"].round(2)
        data["Dinero Recaudado ($USD)"] = data["Cantidad de Veh√≠culos Rentados"].apply(lambda x: f"${x:,.2f}")
        es_dinero = True
        es_promedio = False
        
    titulo = (
        f"Promedio de D√≠as Rentados seg√∫n la Empresa" if es_promedio else
        f"{metrica} seg√∫n la Empresa" if es_dinero else
        "Rentas generadas seg√∫n la Empresa"
    )

    fig = px.bar(
        data, 
        x="Empresa", 
        y="Cantidad de Veh√≠culos Rentados", 
        color="Empresa", 
        color_discrete_sequence=rojo(),
        title=titulo,
        text="Promedio de D√≠as Rentados" if es_promedio else "Dinero Recaudado ($USD)" if es_dinero else "Cantidad de Veh√≠culos Rentados",
        labels={
            "Cantidad de Veh√≠culos Rentados": "D√≠as Promedio" if es_promedio else "Monto ($USD)" if es_dinero else "Cantidad de Veh√≠culos Rentados", 
            "Empresa": "Empresa"
        }
    )
        
    st.plotly_chart(fig)
    
    with st.expander("An√°lisis Detallado"):
        mostrar_datos_y_analisis(data, es_dinero, es_promedio, metrica)