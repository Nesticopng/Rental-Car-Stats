import streamlit as st
import plotly.express as px
import numpy as np
from src.utils.helpers import cargar_datos
from src.utils.paleta_rojo import rojo

# An√°lisis Automatizado
def generar_analisis(data, metrica):
    st.write("### An√°lisis Estad√≠stico")

    analisis = []

    # Calcular valores clave
    total_registros = len(data)
    media = data.iloc[:, 1].mean()
    mediana = data.iloc[:, 1].median()
    desviacion = data.iloc[:, 1].std()
    max_valor = data.iloc[:, 1].max()
    min_valor = data.iloc[:, 1].min()
    top_locacion = data.iloc[0, 0]
    top_valor = data.iloc[0, 1]
    min_indice = data.iloc[:, -1].idxmin()
    min_categoria = data.iloc[min_indice, 0]

    if metrica == "Cantidad de Rentas":
        analisis.append(f"üìä **Total de Ubicaciones analizadas:** {total_registros:,}")
        analisis.append(f"üìà **Promedio de {metrica}:** {media:,.2f}")
        analisis.append(f"üìä **Mediana de {metrica}:** {mediana:,.0f}")
        analisis.append(f"üìâ **Desviaci√≥n est√°ndar de {metrica}:** {desviacion:,.2f}")
        analisis.append(f"üèÜ **Locaci√≥n con mayor {metrica}:** {top_locacion} con {top_valor:,.0f}")
        analisis.append(f"üîΩ **La Ubicaci√≥n que menos {metrica} gener√≥ fue {min_categoria} :** {min_valor:,.0f}")
    
    if metrica == "Dinero Generado (USD)":
        analisis.append(f"üìä **Total de Ubicaciones analizadas:** {total_registros:,}")
        analisis.append(f"üìà **Promedio de {metrica}:** üí≤{media:,.2f}")
        analisis.append(f"üìä **Mediana de {metrica}:** üí≤{mediana:,.2f}")
        analisis.append(f"üìâ **Desviaci√≥n est√°ndar de {metrica}:** üí≤{desviacion:,.2f}")
        analisis.append(f"üèÜ **Locaci√≥n con mayor {metrica}:** {top_locacion} con üí≤{top_valor:,.2f}")
        analisis.append(f"üîΩ **Menor {metrica}:** üí≤{min_valor:,.2f}")    

    # An√°lisis de dispersi√≥n
    if desviacion > media * 0.5:
        analisis.append(f"‚ö†Ô∏è **Alta variabilidad:** Existe una gran diferencia entre las locaciones en t√©rminos de {metrica}.")
    
    else:
        analisis.append(f"‚úÖ **Distribuci√≥n estable:** No hay grandes diferencias extremas en {metrica}.")

    # An√°lisis de concentraci√≥n
    percentil_90 = np.percentile(data.iloc[:, 1], 90)
    percentil_10 = np.percentile(data.iloc[:, 1], 10)

    # An√°lisis de concentraci√≥n
    if max_valor > percentil_90 * 1.5:
        analisis.append(f"üöÄ **El valor m√°ximo ({max_valor:,.2f}) es significativamente superior al percentil 90.** Esto sugiere que una o pocas locaciones dominan la m√©trica.")
    
    elif max_valor < percentil_90:
        analisis.append("üìä **El valor m√°ximo no es muy superior al percentil 90.** Esto indica una distribuci√≥n m√°s uniforme.")

    if top_valor > percentil_90 * 1.5:
        analisis.append(f"üöÄ **{top_locacion} est√° significativamente por encima del 90% de las locaciones.** Podr√≠a ser un punto estrat√©gico clave.")
    
    if min_valor < percentil_10:
        analisis.append(f"üîª **Existen locaciones con valores por debajo del percentil 10.** Es recomendable analizar si se requieren optimizaciones de estrategias para mejorar estas tendencias.")

    # Recomendaciones seg√∫n tendencias
    if media > 1000 and metrica == "Dinero Generado (USD)":
        analisis.append("üí∞ **Los ingresos promedio son altos.** Se puede considerar estrategias para mantener esta tendencia positiva.")
    
    elif media < 500 and metrica == "Dinero Generado (USD)":
        analisis.append("üìâ **Ingresos promedio bajos.** Evaluar promociones o mejorar la distribuci√≥n de veh√≠culos.")
    
    if top_valor > media * 2:
        analisis.append(f"üèÜ **{top_locacion} es un l√≠der {metrica}.** Se podr√≠a analizar su situaci√≥n y estrategias para replicar en otras locaciones.")

    # Mostrar el an√°lisis
    for linea in analisis:
        st.write(linea)

    columnas_a_mostrar = ["Locaci√≥n", "Cantidad de Rentas"] if metrica == "Cantidad de Rentas" else ["Locaci√≥n", "Dinero Generado ($USD)"]

    st.write("### Tabla de Datos")
    st.write(data[columnas_a_mostrar])

def grafica_loc():

    # Cargar datos
    df = cargar_datos()

    st.header("An√°lisis de Locaciones")

    # Filtros
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        datos_config_decode = st.selectbox(
            "Formato de los Datos",
            ("IATA", "Decodificados"),
        )

    with col2:
        config_loc_in_out = st.selectbox(
            "Selecciona el tipo de ubicaci√≥n",
            ("Sitio de Renta", "Sitio de Retorno"),
        )

    with col3:
        grafica_loc = st.selectbox(
            "Clasificar por",
            ("Ciudad", "Pa√≠s"),
            disabled=(datos_config_decode == "IATA")
        )

    with col4:
        metrica = st.selectbox(
            "M√©trica a analizar",
            ("Cantidad de Rentas", "Dinero Generado (USD)")
        )

    # Definir la columna de ubicaci√≥n seg√∫n las selecciones
    if datos_config_decode == "IATA":
        columna_analisis = "LocIn" if config_loc_in_out == "Sitio de Renta" else "LocOut"
        label_locacion = "Ubicaci√≥n (IATA)"
    else:
        if grafica_loc == "Ciudad":
            columna_analisis = "LocInCity" if config_loc_in_out == "Sitio de Renta" else "LocOutCity"
            label_locacion = "Ciudad"
        else:
            columna_analisis = "LocInCountry" if config_loc_in_out == "Sitio de Renta" else "LocOutCountry"
            label_locacion = "Pa√≠s"

    # Calcular m√©trica seleccionada
    if metrica == "Cantidad de Rentas":
        data = df[columna_analisis].value_counts().reset_index()
        data.columns = ["Locaci√≥n", "Cantidad de Rentas"]
        data = data.sort_values(by="Cantidad de Rentas", ascending=False)
        columna_valor = "Cantidad de Rentas"
        texto_valor = "Cantidad de Rentas"
    else:
        data = df.groupby(columna_analisis)["TotalBill"].sum().reset_index()
        data.columns = ["Locaci√≥n", "Valor"]
        data = data.sort_values(by="Valor", ascending=False)
        data["Dinero Generado ($USD)"] = data["Valor"].apply(lambda x: f"${x:,.2f}")
        columna_valor = "Valor"  
        texto_valor = "Dinero Generado ($USD)"

    # T√≠tulo din√°mico
    titulo = f"{metrica} seg√∫n Locaciones de {config_loc_in_out}"

    # Configuraci√≥n del Gr√°fico
    fig = px.bar(
        data, x="Locaci√≥n", y=columna_valor, color="Locaci√≥n",
        color_discrete_sequence=rojo(),
        title=titulo,
        text=texto_valor,
        labels={columna_valor: metrica, "Locaci√≥n": label_locacion}
    )

    st.plotly_chart(fig)


    with st.expander(f"An√°lisis Detallado"):
        generar_analisis(data, metrica)